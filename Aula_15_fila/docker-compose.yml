version: '3.8'

services:

  # NODE WEB
  nodeweb-container:
    build:
      context: .
      dockerfile: docker/node-web/Dockerfile.dev
    env_file: .env
    volumes:
      - .:/app
      - node-modules-aula-15-volume:/app/node_modules
    restart: unless-stopped
    environment:
      - IS_CONTAINER=TRUE
      - POSTGRES_HOST=postgres_host
      - POSTGRES_PORT=5432
      - RABBITMQ_HOST=rabbitmq-container  # Corrigido
      - RABBITMQ_PORT=5672
      - NGINX_HOST=nginx_host
      - NGINX_PORT=80
    ports:
      - "3000:3000"         # Mapeamento para acesso externo
    networks:
      project-network:
        aliases:
          - nodeweb_host
    depends_on:
      - postgres-container
      - rabbitmq-container

  # NODE CLI
  nodecli-container:
    build:
      context: .
      dockerfile: docker/node-cli/Dockerfile
    env_file: .env
    volumes:
      - .:/app
      - node-modules-aula-15-volume:/app/node_modules
    environment:
      - IS_CONTAINER=TRUE
      - POSTGRES_HOST=postgres_host
      - POSTGRES_PORT=5432
      - RABBITMQ_HOST=rabbitmq-container  # Corrigido
      - RABBITMQ_PORT=5672
      - NGINX_HOST=nginx_host
      - NGINX_PORT=80
    networks:
      - project-network
    depends_on:
      - postgres-container
      - rabbitmq-container

  # NODE WORKER
  nodeworker-container:
    build:
      context: .
      dockerfile: docker/node-worker/Dockerfile.dev
    env_file: .env
    volumes:
      - .:/app
      - node-modules-aula-15-volume:/app/node_modules
    restart: unless-stopped
    environment:
      - IS_CONTAINER=TRUE
      - POSTGRES_HOST=postgres_host
      - POSTGRES_PORT=5432
      - RABBITMQ_HOST=rabbitmq-container  # Corrigido
      - RABBITMQ_PORT=5672
      - RABBITMQ_CONCURRENCY=2
      - NGINX_HOST=nginx_host
      - NGINX_PORT=80
    networks:
      - project-network
    depends_on:
      - postgres-container
      - rabbitmq-container

  # NGINX
  nginx-container:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./public:/var/www/public
    depends_on:
      - nodeweb-container
    networks:
      project-network:
        aliases:
          - nginx_host

  # POSTGRES
  postgres-container:
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: America/Sao_Paulo
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata-aula-15-volume:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      project-network:
        aliases:
          - postgres_host

  # RABBITMQ
  rabbitmq-container:
    image: rabbitmq:3.13.1-management-alpine
    ports:
      - "${RABBITMQ_PORT}:5672"    # Porta para conexão com a fila (producers/consumers)
      - "15672:15672"              # Porta do painel de gerenciamento web
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-aula-15-volume:/var/lib/rabbitmq
    networks:
      project-network:
        aliases:
          - rabbitmq_host
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s            # Verificar a cada 30 segundos
      retries: 5               # Tentar até 5 vezes
      start_period: 10s        # Iniciar a verificação após 10 segundos
      timeout: 10s             # Timeout de 10 segundos para cada verificação

# OTHERS

networks:
  project-network:
    driver: bridge

volumes:
  pgdata-aula-15-volume:
  node-modules-aula-15-volume:
  rabbitmq-aula-15-volume:
